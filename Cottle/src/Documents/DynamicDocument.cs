using System;
using System.IO;
using System.Linq;
using System.Reflection.Emit;
using Cottle.Documents.Dynamic;
using Cottle.Parsers;
using Cottle.Settings;

namespace Cottle.Documents
{
	/// <summary>
	/// Dynamic document compiles template using MSIL generation for better
	/// performance. Code generated by JIT compiler can be reclaimed by garbage
	/// collector, but you should use a caching mechanism to avoid re-creating
	/// too many DynamicDocument instances using the same template source.
	/// </summary>
	public sealed class DynamicDocument : AbstractDocument
	{
		#region Attributes

		private readonly Renderer	renderer;

		private readonly Storage	storage;

		#endregion

		#region Constructors

		public DynamicDocument (TextReader reader, ISetting setting)
		{
			Compiler		compiler;
			DynamicMethod	method;
			IParser			parser;

			method = new DynamicMethod (string.Empty, typeof (Value), new [] {typeof (Storage), typeof (IScope), typeof (TextWriter)}, this.GetType ());
			compiler = new Compiler (method.GetILGenerator (), setting.Trimmer);
			parser = new DefaultParser (setting.BlockBegin, setting.BlockContinue, setting.BlockEnd);

			this.storage = compiler.Compile (parser.Parse (reader));
			this.renderer = (Renderer)method.CreateDelegate (typeof (Renderer));
/*
			var name = "HelloWorld.exe";
			var assemblyname = new AssemblyName(name);
			var assemblybuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyname, AssemblyBuilderAccess.RunAndSave);
			var modulebuilder = assemblybuilder.DefineDynamicModule(name, "x.dll");
			var programmclass = modulebuilder.DefineType("Program",TypeAttributes.Public);
			var method2 = programmclass.DefineMethod("Main",MethodAttributes.Public | MethodAttributes.Static,typeof (Value), new [] {typeof (Context), typeof (IScope), typeof (TextWriter)});
			compiler = new Compiler (method2.GetILGenerator (), setting.Trimmer);
			compiler.Compile (command);
			programmclass.CreateType();
			assemblybuilder.Save ("x.dll");
*/
		}

		public DynamicDocument (TextReader reader) :
			this (reader, DefaultSetting.Instance)
		{
		}

		public DynamicDocument (string template, ISetting setting) :
			this (new StringReader (template), setting)
		{
		}

		public DynamicDocument (string template) :
			this (new StringReader (template), DefaultSetting.Instance)
		{
		}

		#endregion

		#region Methods

		public override Value Render (IScope scope, TextWriter writer)
		{
			return this.renderer (this.storage, scope, writer);
		}

		#endregion
	}
}
